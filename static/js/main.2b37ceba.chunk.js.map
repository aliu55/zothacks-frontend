{"version":3,"sources":["app/components/user-card/userCard.js","app/views/user-list/userList.js","App.js","serviceWorker.js","index.js"],"names":["UserCard","user","number","div","initial","opacity","animate","transition","duration","delay","className","firstName","lastName","email","favoriteStockId","UserList","useState","users","setUsers","a","axios","get","status","data","console","log","useEffect","getUserList","map","index","key","App","baseName","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iaA8BeA,MAxBf,YAAqC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACxB,OACE,kBAAC,IAAOC,IAAR,CACEC,QAAS,CAAEC,QAAS,GACpBC,QAAS,CACPD,QAAS,CAAC,EAAG,IAEfE,WAAY,CACVC,SAAU,GACVC,MAAgB,GAATP,GAEXQ,UAAU,aACR,yBAAKA,UAAU,OACb,4BAAKR,IAEP,4BACGD,EAAKU,UADR,IACoBV,EAAKW,UAEzB,4BAAKX,EAAKY,OACV,4BAAKZ,EAAKa,mBCaDC,MA/Bf,WAAoB,MAGQC,mBAAS,MAHjB,mBAGXC,EAHW,KAGJC,EAHI,iDAWlB,4BAAAC,EAAA,sEACoBC,IAAMC,IAAI,qDAD9B,OAIuB,OAHjBJ,EADN,QAIYK,OACRJ,EAASD,EAAMM,KAAKA,MAEpBC,QAAQC,IAAI,0BAPhB,4CAXkB,sBAsBlB,OAhBAC,qBAAU,YANQ,mCAOhBC,KACC,IAeD,yBAAKjB,UAAU,cACXO,GAAS,IAAIW,KAAI,SAAU3B,EAAM4B,GACjC,OAAO,kBAAC,EAAD,CAAU5B,KAAMA,EAAM6B,IAAKD,EAAO3B,OAAQ2B,SCL1CE,MAff,WACE,OACE,yBAAKrB,UAAU,iBACb,kBAAC,IAAD,CAAQsB,SAAS,sBACf,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EAACC,KAAM,IACZC,UAAWpB,QCPHqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.2b37ceba.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./userCard.scss\";\n\nimport { Link } from \"react-router-dom\";\nimport { motion } from \"framer-motion\"\n\nfunction UserCard({ user, number }) {\n  return (\n    <motion.div \n      initial={{ opacity: 0 }}\n      animate={{\n        opacity: [0, 1],\n      }}\n      transition={{\n        duration: 0.2,\n        delay: number * 0.1\n      }}\n    className=\"user-card\">\n      <div className=\"tag\">\n        <h1>{number}</h1>\n      </div>\n      <h2>\n        {user.firstName} {user.lastName}\n      </h2>\n      <h3>{user.email}</h3>\n      <h4>{user.favoriteStockId}</h4>\n    </motion.div>\n  );\n}\n\nexport default UserCard;\n","import React, { useState, useEffect } from \"react\";\nimport \"./userList.scss\";\n\nimport axios from \"axios\"\n\nimport { UserCard } from \"app/components\";\n\nfunction UserList() {\n\n  // List of users from the database\n  const [users, setUsers] = useState(null);\n\n  // Get the list of users from the database upon page load\n  useEffect(() => {\n    getUserList();\n  }, []);\n\n  // Get the list of users through a GET request to the backend API\n  async function getUserList() {\n    let users = await axios.get(\"https://zothacks-2020-workshop.herokuapp.com/user\");\n    \n    // If we get a valid response, set the state object, or print an error.\n    if (users.status === 200) {\n      setUsers(users.data.data);\n    } else {\n      console.log(\"Error retrieving users\");\n    }\n  }\n\n  return (\n    <div className=\"user-list\">\n      {(users || []).map(function (user, index) {\n        return <UserCard user={user} key={index} number={index}/>;\n      })}\n    </div>\n  );\n}\n\nexport default UserList;\n","// React and CSS Imports\nimport React from \"react\";\nimport \"./App.scss\";\nimport \"globals/hack-styles.scss\";\nimport '../node_modules/react-vis/dist/style.css';\n\n// Installed dependency imports\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\";\n\n// Website imports for classes you made\nimport { UserList } from \"app/views\";\n\nfunction App() {\n  return (\n    <div className=\"app fill-view\">\n      <Router baseName=\"/zothacks-frontend\">\n        <Switch>\n          <Route \n            exact path={\"/\"}\n            component={UserList}\n          />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}